AWSTemplateFormatVersion: '2010-09-09'
Description: 'For laravel production environment'
Parameters:
  KeyName:
    Description: 'Key Pair name'
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: 'aws_goodistory_tokyo'
  SSHAccessIp:
    Description: 'Your public IP address to allow SSH access'
    Type: String
    AllowedPattern: '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'
    Default: '1.1.1.1'
    ConstraintDescription: 'Enter a valid IPv4 address'
  EC2ImageId:
    Description: 'ami'
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    # TODO 無料枠のは下記のであっているか確認する
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2  # Amazon Linux 2 の最新
#    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64 # amazon linux 2023 の最新
  DBUserName:
    Description: 'DB user name'
    Type: String
    Default: user1
  DBPassword:
    Description: 'DB password'
    Type: String
    Default: password
  DBPort:
    Description: 'DB port from app server to db'
    Type: Number
    Default: 3306
    NoEcho: true

Resources:
  ########## VPC ##########
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      # 各サブネットは 10.0.1.x, 10.0.2.x などになる
      CidrBlock: '10.0.0.0/16'
      # DNS ホスト名属性は、VPC内で起動されたインスタンスがパブリック IPアドレスに対応する
      # パブリックDNS ホスト名を受け取るかどうかを決定します。
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vpc'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ########## パブリックサブネット関連 ##########
  # サブネット
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: 'ap-northeast-1a'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-subnet'
  # ルートテーブル
  PublicSubnetRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-subnet-route-table'
  # サブネットとルートテーブルの関連付け
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicSubnetRouteTable
  # InternetGatewayへのルート
  PublicSubnetRouteToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment

  ########## 踏み台サーバー関連 ##########
  # 踏み台サーバー
  BastionServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref EC2ImageId
      InstanceType: 't2.micro'
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true  #  パブリック IP アドレスをインスタンスに関連付けるか
          DeleteOnTermination: true # インスタンスが削除されたときにネットワークインターフェースを自動的に削除するか
          DeviceIndex: '0'      # インスタンスに関連付けるネットワークインターフェースのデバイスインデックス
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-bastionServer-instance'
    DependsOn: VPCGatewayAttachment
  # 踏み台サーバーのセキュリティーグループ
  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allowing incoming SSH and ICMP.'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Ping
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: '0.0.0.0/0'
        # SSH
        - IpProtocol: tcp
          FromPort: 22  # Port22から
          ToPort: 22    # 22までの範囲を指定
#          CidrIp: !Sub '${SSHAccessIp}/32' # TODO 元に戻す
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-bastionServer-securityGroup'

  ########## アプリケーションサーバー関連 ##########
  # アプリケーションサーバー
  AppServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref EC2ImageId
      InstanceType: 't2.micro'
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref AppInstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: true  # パブリック IP アドレスをインスタンスに関連付けるか
          DeleteOnTermination: true # インスタンスが削除されたときにネットワークインターフェースを自動的に削除するか
          DeviceIndex: '0'      # インスタンスに関連付けるネットワークインターフェースのデバイスインデックス
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !Ref AppSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-appServer-instance'
        - Key: CodeDeployKey
          Value: !Sub '${AWS::StackName}-appServer-deploy'
      UserData:
        # /bin/bash -x: 実行したコマンドを出力するデバッグモードでBashを実行
        # /opt/aws/bin/cfn-signal: CloudFormation リソースにシグナルを送信、
        # -e: 終了ステータスを指定、 $?: 直前のコマンドの終了ステータス、--stack: 伝えるstack、--region: 伝えるスタックがあるリージョン
        # 実行ログは /var/log/cloud-init-output.log で見られる
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          curl -s https://raw.githubusercontent.com/suke-shun-kato/experiment_laravel/main/aws/app/app_server_init.sh | bash -ex
          cp .env.prod.example .env
          export DB_HOST=${DatabaseCluster.Endpoint.Address}
          export DB_PORT=${DBPort}
          export DB_USERNAME=${DBUserName}
          export DB_PASSWORD=${DBPassword}
          export AWS_DEFAULT_REGION=${AWS::Region}
          export AWS_BUCKET=${S3Bucket}
          php artisan key:generate
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AppServer --region ${AWS::Region}
    DependsOn: VPCGatewayAttachment

  # アプリケーションサーバーのロール
  AppRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-iam-role'
      AssumeRolePolicyDocument:   # この権限をEC2インスタンスに委譲
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:  # 委譲するAWSアカウントやサービス
              Service:    # 委譲するAWSサービス
                - 'codedeploy.amazonaws.com'
                - 'ec2.amazonaws.com'
            Action:     # 委譲するAction（AWSのAPI）
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess  # S3にアクセスできるポリシーをロールに追加
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole  # CodeDeployできるポリシーをロールに追加

  AppInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Sub '${AWS::StackName}-deploy-instanceProfile'
      Roles:
        - !Ref AppRole

  # アプリケーションサーバーのセキュリティーグループ
  AppSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allowing incoming HTTP and HTTPS'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # SSH（踏み台ホストのセキュリティーグループのみOK）
        - IpProtocol: tcp
          FromPort: 22  # Port22〜
          ToPort: 22    # 22までの範囲を指定
          SourceSecurityGroupId: !Ref BastionSecurityGroup
        # HTTP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        # HTTPS
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-appServer-securityGroup'

  ########## DB関連 ##########
  DatabaseCluster:
    Type: 'AWS::RDS::DBCluster'
    DeletionPolicy: Delete  # TODO 色々実験中なのでひとまずDelete
    Properties:
      Engine: aurora-mysql
      EngineVersion: '5.7.mysql_aurora.2.11.2'
      DBClusterIdentifier: !Sub '${AWS::StackName}-databaseCluster' # DB クラスター識別子
      MasterUsername: !Ref DBUserName
      MasterUserPassword: !Ref DBPassword
      BackupRetentionPeriod: 7  # 自動スナップショットの保存日数
      PreferredBackupWindow: 19:00-19:30  # スナップショットの時間を日本時間の4:00〜4:30に設定
      StorageEncrypted: true  # 暗号化を有効に
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName:
        Ref: DatabaseSubnetGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-databaseCluster'
    DependsOn: VPCGatewayAttachment

  DatabaseInstance1:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBClusterIdentifier:
        Ref: DatabaseCluster
      DBInstanceClass: db.t3.small
      DBSubnetGroupName:
        Ref: DatabaseSubnetGroup
      Engine: aurora-mysql
      PubliclyAccessible: "false"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-database-1'

  DatabaseInstance2:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBClusterIdentifier:
        Ref: DatabaseCluster
      DBInstanceClass: db.t3.small
      DBSubnetGroupName:
        Ref: DatabaseSubnetGroup
      Engine: aurora-mysql
      PubliclyAccessible: "false"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-database-2'

  DatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Database security group for the Laravel experiment production .'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # AppサーバーからDB接続
        - IpProtocol: tcp
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          SourceSecurityGroupId: !Ref AppSecurityGroup
        # 踏み台サーバーからDB接続
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-database-securityGroup'
  # サブネット
  DatabaseSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'The Laravel experiment production database subnet group.'
      SubnetIds:
        - Ref: DatabasePrivateSubnetA
        - Ref: DatabasePrivateSubnetB
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-database-private-subnetGroup'
  DatabasePrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: '10.0.2.0/24'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-database-private-subnet-A'
  DatabasePrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      # !Select [index, list]   listの中のindexの要素を取得
      # !GetAZs ''    アベイラビリティーゾーンのリストを取得。空の文字列を引数として渡していて、殻の場合はリージョン内で使用可能なすべてのアベイラビリティーゾーンのリストになる。
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: '10.0.3.0/24'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-database-private-subnet-B'
  # ルートテーブル
  PrivateSubnetRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-subnet-route-table'
  # サブネットとルートテーブルの関連付け
  DatabasePrivateSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DatabasePrivateSubnetA
      RouteTableId: !Ref PrivateSubnetRouteTable
  DatabasePrivateSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DatabasePrivateSubnetB
      RouteTableId: !Ref PrivateSubnetRouteTable

#  ########## DB関連（普通のMySQL） ##########
#  Database:
#    Type: 'AWS::RDS::DBInstance'
#    DeletionPolicy: Delete
#    Properties:
#      AllocatedStorage: '5'   # 5Gのストレージ
#      BackupRetentionPeriod: 0  # 自動スナップショットの保存日数
#      DBInstanceClass: 'db.t2.micro'
#      DBName: laravel_exp
#      Engine: MySQL
#      MasterUsername: admin
#      MasterUserPassword: password
#      VPCSecurityGroups:
#        - !Sub ${DatabaseSecurityGroup.GroupId}
#      DBSubnetGroupName: !Ref DatabaseSubnetGroup
#    DependsOn: VPCGatewayAttachment
#  DatabaseSecurityGroup:
#    Type: 'AWS::EC2::SecurityGroup'
#    Properties:
#      GroupDescription: 'Database security group for the Laravel experiment production .'
#      VpcId: !Ref VPC
#      SecurityGroupIngress:
#        - IpProtocol: 'tcp'
#          FromPort: 3306
#          ToPort: 3306
#          SourceSecurityGroupId: !Ref AppSecurityGroup
#      Tags:
#        - Key: Name
#          Value: !Sub '${AWS::StackName}-database-securityGroup'
#  # サブネット
#  DatabaseSubnetGroup:
#    Type: 'AWS::RDS::DBSubnetGroup'
#    Properties:
#      DBSubnetGroupDescription: 'The Laravel experiment production database subnet group.'
#      SubnetIds:
#        - Ref: DatabasePrivateSubnetA
#        - Ref: DatabasePrivateSubnetB
#  DatabasePrivateSubnetA:
#    Type: 'AWS::EC2::Subnet'
#    Properties:
#      AvailabilityZone: !Select [ 0, !GetAZs '' ]
#      CidrBlock: '10.0.2.0/24'
#      VpcId: !Ref VPC
#      Tags:
#        - Key: Name
#          Value: !Sub '${AWS::StackName}-database-private-subnet-A'
#  DatabasePrivateSubnetB:
#    Type: 'AWS::EC2::Subnet'
#    Properties:
#      # !Select [index, list]   listの中のindexの要素を取得
#      # !GetAZs ''    アベイラビリティーゾーンのリストを取得。空の文字列を引数として渡していて、殻の場合はリージョン内で使用可能なすべてのアベイラビリティーゾーンのリストになる。
#      AvailabilityZone: !Select [ 1, !GetAZs '' ]
#      CidrBlock: '10.0.3.0/24'
#      VpcId: !Ref VPC
#      Tags:
#        - Key: Name
#          Value: !Sub '${AWS::StackName}-database-private-subnet-B'
#  # ルートテーブル
#  PrivateSubnetRouteTable:
#    Type: 'AWS::EC2::RouteTable'
#    Properties:
#      VpcId: !Ref VPC
#      Tags:
#        - Key: Name
#          Value: !Sub '${AWS::StackName}-private-subnet-route-table'
#  # サブネットとルートテーブルの関連付け
#  DatabasePrivateSubnetARouteTableAssociation:
#    Type: 'AWS::EC2::SubnetRouteTableAssociation'
#    Properties:
#      SubnetId: !Ref DatabasePrivateSubnetA
#      RouteTableId: !Ref PrivateSubnetRouteTable
#  DatabasePrivateSubnetBRouteTableAssociation:
#    Type: 'AWS::EC2::SubnetRouteTableAssociation'
#    Properties:
#      SubnetId: !Ref DatabasePrivateSubnetB
#      RouteTableId: !Ref PrivateSubnetRouteTable

  ########## Code Deploy ##########
  CodeDeploy:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub '${AWS::StackName}-codeDeploy'
      # デプロイ対象がEC2（他にECSやLambdaを指定できる）
      ComputePlatform: Server
  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName:
        Ref: CodeDeploy
      # タグで、key:CodeDeployKey、Value:${AWS::StackName}-prod-appServer-deploy を設定しているec2をデプロイ対象にする
      Ec2TagFilters:
        - Key: CodeDeployKey
          Value: !Sub '${AWS::StackName}-appServer-deploy'
          Type: KEY_AND_VALUE
      DeploymentGroupName: !Sub '${AWS::StackName}-deploymentGroup'
      # Deploymentについては今回記述しない
#      Deployment:
#        # hooks の ApplicationStop イベントの実行が失敗したとき無視して次のイベントを続けるか
#        IgnoreApplicationStopFailures: false
#        Revision:
#          RevisionType: GitHub
#          GitHubLocation:
#            CommitId:
#              Ref:
#            Repository:
#              Ref: experiment_laravel
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      ServiceRoleArn:
        Fn::GetAtt: [ AppRole, Arn ]  # AppRole の Arn属性の値を取得する
      # デプロイに失敗したときにロールバックする
      AutoRollbackConfiguration:
        Enabled: 'true'
        Events:
          - DEPLOYMENT_FAILURE

  ########## S3関連 ##########
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    # Stackを削除したときの動作: 削除する
    DeletionPolicy: Delete  # TODO 今は色々試しているのでdelete
    Properties:
      # ACL無効
      AccessControl: Private
      BucketName: !Sub '${AWS::StackName}-s3-bucket'
      # デフォルトの暗号化
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:  # Amazon S3 マネージドキー (SSE-S3)
              SSEAlgorithm: AES256
            BucketKeyEnabled: true  # 有効
      # ブロックパブリックアクセス
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True     # ACLでの設定のブロック
        IgnorePublicAcls: True    # ACLでの設定のブロック
        BlockPublicPolicy: false      # バケットポリシーでの設定のブロック、AWSアカウント内でのセキュリティ強化
        RestrictPublicBuckets: false  # バケットポリシーでの設定のブロック、AWSアカウント間でのセキュリティ強化

  # バケットポリシー
  BackupPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        # 全ユーザーに指定バケットのオブジェクト取得を可能にする（EC2からのアップロードなどはIAMロールで定義）
        Statement:
          - Effect: Allow
            Principal: '*'  # 全ユーザーに
            Resource:   # 下記のS3バケットに対して
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Action:     # S3のオブジェクト取得処理を許可する
              - 's3:GetObject'


Outputs:
  BastionServerPublicName:
    Value: !Sub ${BastionServer.PublicDnsName}
    Description: 'Public Name of Bastion Server to connect via SSH as user ec2-user.'
  AppServerPublicName:
    Value: !Sub ${AppServer.PublicDnsName}
    Description: 'Public Name of App Server to connect via SSH as user ec2-user.'
  SshCommand:
    Value: !Sub "ssh -o ProxyCommand='ssh -W %h:%p -i ~/.ssh/aws_goodistory_tokyo.pem ec2-user@${BastionServer.PublicDnsName}' -i ~/.ssh/aws_goodistory_tokyo.pem ec2-user@${AppServer.PublicDnsName}"
    Description: 'A ssh login command from terminal'
  WriteDatabaseEndpoint:
    Value: !GetAtt DatabaseCluster.Endpoint.Address
    Description: 'Endpoint name of Write database.'
  ReadDatabaseEndpoint:
    Value: !GetAtt DatabaseCluster.ReadEndpoint.Address
    Description: 'Endpoint name of Read database.'
  S3BucketName:
    Value: !Ref S3Bucket
    Description: 'S3 bucket name.'